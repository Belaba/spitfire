#!/usr/bin/env elixir

Mix.install([
  {:spitfire, path: "."},
  :nimble_csv
])

defmodule Main do
  alias NimbleCSV.RFC4180, as: CSV

  @ignore [
    "/lib/**/ebin/**/*",
    "/lib/**/_build/**/*",
    "/lib/**/tmp/**/*"
  ]

  def collect_files(argv) do
    root = List.first(argv)
    files = Path.wildcard(Path.join(root, "lib/**/*.ex"))
    ignore = Enum.flat_map(@ignore, &Path.wildcard(Path.join(root, &1)))
    for file <- files, file not in ignore, {:ok, content} <- [File.read(file)] do
      lines = String.split(content, "\n") |> Enum.count()
      {file, content, lines}
    end
  end

  def run(files) do
    Task.async_stream(files, fn {file, content, _} ->
      try do
        :timer.tc(fn ->
          case Spitfire.parse(content) do
            {:ok, _ast} -> [ok: file]
            {:error, _ast, errors} -> [error: file, errors: errors]
          end
        end, :millisecond)
      rescue
        e ->
          {nil, [error: file, exception: e]}
      end
    end, on_timeout: :kill_task, zip_input_on_exit: true)
    |> Stream.map(fn
      {:ok, r} -> r
      {:exit, {file, :timeout}} -> {:timeout, file}
    end)
    |> Enum.group_by(fn 
        {_, [{:ok, _file}]} -> :ok
        {_, [{:error, _file} | _]} -> :error
        {:timeout, _f} -> :timeout
      end, fn 
        {time, [{:ok, file}]} -> {file, time}
        {time, [error: file, errors: errors]} -> {file, errors, time}
        {time, [error: file, exception: e]} -> {file, e, time}
        {:timeout, {file, _content}} -> file
      end)
  end

  def to_csv(data) do
    headers = ~w(result file time errors)
    rows = 
      for {result_type, results} <- data, row <- results do
        case {result_type, row} do
          {:ok, {file, time}} -> ["success", file, time, ""]
          {:error, {file, errors, time}} -> ["failure", file, time, inspect(errors)]
          {:timeout, file} -> ["timeout", file, "", ""]
        end
      end

    CSV.dump_to_iodata([headers | rows]) |> then(&File.write!("results.csv", &1))
  end
end

files = Main.collect_files(System.argv())
lines = Enum.map(files, fn {_, _, lines} -> lines end) |> Enum.sum()

{time, data} = :timer.tc(fn -> Main.run(files) end, :millisecond)

data |> Main.to_csv()

data = 
  Map.new(data, fn {k, v} ->
    {k, Enum.count(v)}
  end)

IO.puts("Results written to results.csv")
IO.puts("Parsed #{lines} concurrently in #{time}ms")
IO.puts("Currently parsing: #{data.ok / (Map.get(data, :error, 0) + Map.get(data, :timeout, 0) + data.ok) * 100}%")
